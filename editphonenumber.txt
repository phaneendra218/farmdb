Below is my profile.html

<div class="profile-container">
    <h2>
        <img src="{{ url_for('static', filename='hello.png') }}" alt="Hello Icon" style="width: 100px; height: 35px; vertical-align: middle; margin-right: 5px;">
        {{ session['username'] }}!
    </h2>
    <div>
        <!-- Phone Number Section -->
        <div class="profile-section">
            <h3>
                <img src="{{ url_for('static', filename='userMobilenumber.png') }}" alt="Mobile Icon" style="width: 23px; height: 23px; vertical-align: middle; margin-right: 5px;">
                Mobile Number
            </h3>
            <div id="phone-display">
                <span id="phone-number"><strong>{{ user.phone_number }}</strong></span>
                <!-- <button id="edit-phone" class="btn btn-secondary">Edit</button> -->
            </div>
            <div id="phone-edit" class="hidden">
                <input type="text" id="phone-input" value="{{ user.phone_number }}" placeholder="Enter your phone number" style="padding: 10px; width: calc(100% - 110px); border: 1px solid #ccc; border-radius: 5px;">                
                   <button id="update-phone" class="btn btn-primary">Update</button>
                   <button id="cancel-edit" class="btn btn-danger">Cancel</button>                
            </div>
        </div>
        <div class="profile-section">
            <h3>
                <img src="{{ url_for('static', filename='updatePassword.png') }}" alt="Mobile Icon" style="width: 23px; height: 23px; vertical-align: middle; margin-right: 5px;">
                Update Password
            </h3>
            <div id="password-display">
                <button id="update-password-button" class="btn btn-secondary">Update Password</button>
            </div>
            <div id="password-edit" class="hidden">
                <input type="password" id="password-input" placeholder="Enter new password" style="padding: 10px; width: calc(100% - 120px); border: 1px solid #ccc; border-radius: 5px;">
                <button id="submit-password" class="btn btn-primary">Update</button>
                <button id="cancel-password" class="btn btn-danger">Cancel</button>
            </div>
        </div>
        <!-- Address Section -->
        <div class="profile-section">
            <h3>
                <img src="{{ url_for('static', filename='userLocation.png') }}" alt="Mobile Icon" style="width: 24px; height: 24px; vertical-align: middle; margin-right: 5px;">
                Addresses
            </h3>
            {% if user.addresses %}
                {% for address in user.addresses %}
                <div class="address-section {% if address.is_default %}default-address{% else %}non-default-address{% endif %}">
                    {% if address.is_default %}
                        <span class="badge">Default</span>
                    {% endif %}
                    <!-- Address Display Section -->
                    <div id="address-display-{{ address.id }}">
                        <p><strong>{{ address.address_type }}</strong></p>
                        <p class="address-text">{{ address.address }}</p>
                        <p class="address-text"><strong>Pincode: </strong>{{ address.pincode }}</p>
                        <button class="btn btn-secondary edit-address" data-id="{{ address.id }}">Edit</button>
                        <form method="post" action="{{ url_for('profile') }}" style="display: inline-block;">
                            <input type="hidden" name="address_id" value="{{ address.id }}">
                            <input type="hidden" name="action" value="make_default">
                            <button type="submit" class="btn btn-secondary" {% if address.is_default %}disabled{% endif %}>Make Default</button>
                        </form>
                        <button class="btn btn-danger delete-address" data-id="{{ address.id }}">Delete</button>
                    </div>
                    <!-- Address Edit Section -->
                    <div id="address-edit-{{ address.id }}" class="hidden">
                        <input type="text" id="address-type-{{ address.id }}" value="{{ address.address_type }}" placeholder="Address Type" style="padding: 10px; width: calc(100% - 10px); border: 1px solid #ccc; border-radius: 5px; margin-bottom: 10px;">
                        <textarea id="address-input-{{ address.id }}" placeholder="Enter address" style="padding: 10px; width: calc(100% - 10px); border: 1px solid #ccc; border-radius: 5px; margin-bottom: 10px;">{{ address.address }}</textarea>
                        <input type="text" id="pincode-{{ address.id }}" value="{{ address.pincode }}" placeholder="Pincode" style="padding: 10px; width: calc(100% - 110px); border: 1px solid #ccc; border-radius: 5px;" required>
                        <button class="btn btn-primary update-address" data-id="{{ address.id }}">Update</button>
                        <button class="btn btn-danger cancel-edit-address" data-id="{{ address.id }}">Cancel</button>
                    </div>
                </div>
                {% endfor %}
            {% else %}
                <p>No addresses available.</p>
            {% endif %}
            <!-- Add New Address Button -->
            <button id="add-new-address-button" class="btn btn-success" style="margin-top: 20px;">+ Add A New Address</button>
            <!-- Add New Address Form -->
            <div id="add-address-form-container" class="hidden" style="margin-top: 20px;">
                <form id="add-address-form">
                    <input type="hidden" name="action" value="add_new_address">
                    <input type="text" name="address_type" placeholder="Address Type (e.g., Home, Office)" required style="padding: 10px; width: calc(100% - 20px); border: 1px solid #ccc; border-radius: 5px; margin-bottom: 10px;">
                    <textarea name="address" placeholder="Enter Address" required style="padding: 10px; width: calc(100% - 20px); border: 1px solid #ccc; border-radius: 5px; margin-bottom: 10px;"></textarea>
                    <input type="text" name="pincode" placeholder="Pincode" required style="padding: 10px; width: calc(100% - 20px); border: 1px solid #ccc; border-radius: 5px; margin-bottom: 10px;" required>
                    <div style="margin-bottom: 10px;">
                        <label>
                            <input type="checkbox" name="is_default" style="margin-right: 5px;">
                            Set as Default Address
                        </label>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Address</button>
                    <button type="button" id="cancel-add-address" class="btn btn-danger">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="toast" id="toast">Phone number updated successfully!</div>

Below is my app.py file /profile and /edit_profile routes

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'user_id' not in session:
        flash('Please login to view your profile', 'danger')
        return redirect(url_for('login'))

    user = User.query.get(session['user_id'])

    if request.method == 'POST':
        action = request.form.get('action')
        # Handle updating the password
        if action == 'update_password':
            new_password = request.form.get('password')
            if not new_password or len(new_password) < 4:
                return jsonify({'success': False, 'message': 'Password must be at least 4 characters long.'}), 400
            
            user.password = new_password  # Directly saving plain-text password
            db.session.commit()
            return jsonify({'success': True, 'message': 'Password updated successfully!'}), 200
        # Handle making an address default
        elif action == 'make_default':
            address_id = request.form.get('address_id')
            address = Address.query.get(address_id)
            if address and address.user_id == user.id:
                for addr in user.addresses:
                    addr.is_default = False
                address.is_default = True
                db.session.commit()
                flash('Address set as default successfully!', 'success')
        # Handle updating phone number
        elif action == 'update_phone_number':
            phone_number = request.form.get('phone_number')
            if not phone_number or not phone_number.isdigit() or len(phone_number) != 10:
                return jsonify({'message': 'Invalid phone number. Please enter a valid 10-digit number.', 'success': False}), 400            
            # Check if the phone number already exists in the database
            existing_user = User.query.filter(User.phone_number == phone_number, User.id != user.id).first()
            if existing_user:
                return jsonify({'message': 'This phone number is already in use. Please choose a different number.', 'success': False}), 400            
            user.phone_number = phone_number
            db.session.commit()
            return jsonify({'message': 'Phone number updated successfully!', 'success': True}), 200        
        # Handle updating an address
        elif action == 'update_address':
            address_id = request.form.get('address_id')
            address_type = request.form.get('address_type')
            address_text = request.form.get('address')
            pincode = request.form.get('pincode')

            if not pincode or not pincode.isdigit() or len(pincode) != 6:
                return jsonify({'message': 'Invalid pincode. Please enter a valid 6-digit number.', 'success': False}), 400

            address = Address.query.get(address_id)
            if address and address.user_id == user.id:
                address.address_type = address_type
                address.address = address_text
                address.pincode = pincode
                db.session.commit()
                return jsonify({'message': 'Address updated successfully!', 'success': True}), 200
            return jsonify({'message': 'Failed to update the address.', 'success': False}), 400
        # Handle adding a new address
        elif action == 'add_new_address':
            address_text = request.form.get('address')
            address_type = request.form.get('address_type')
            pincode = request.form.get('pincode')
            is_default = request.form.get('is_default') == 'on'

            if not pincode or not pincode.isdigit() or len(pincode) != 6:
                return jsonify({'message': 'Invalid pincode. Please enter a valid 6-digit number.', 'success': False}), 400

            if address_text and address_type:
                new_address = Address(
                    user_id=user.id,
                    address=address_text,
                    address_type=address_type,
                    pincode=pincode,
                    is_default=is_default
                )
                db.session.add(new_address)
                # Ensure only one default address
                if is_default:
                    for address in user.addresses:
                        if address.id != new_address.id:
                            address.is_default = False

                db.session.commit()
                return jsonify({'success': True, 'message': 'Address added successfully!'})
            else:
                return jsonify({'success': False, 'message': 'Please provide valid address details.'}), 400
        # Handle deleting an address
        elif action == 'delete_address':
            address_id = request.form.get('address_id')
            address = Address.query.get(address_id)

            if address and address.user_id == user.id:
                db.session.delete(address)
                db.session.commit()
                return jsonify({'success': True, 'message': 'Address deleted successfully!'}), 200

            return jsonify({'success': False, 'message': 'Failed to delete the address.'}), 400

    return render_template('profile.html', user=user)

@app.route('/edit_profile', methods=['GET', 'POST'])
def edit_profile():
    if 'user_id' not in session:
        flash('Please login to edit your profile', 'danger')
        return redirect(url_for('login'))

    user = User.query.get(session['user_id'])

    if request.method == 'POST':
        # Retrieve the new phone number
        new_phone_number = request.form.get('phone_number')

        # Validate the phone number is unique
        if new_phone_number != user.phone_number:
            existing_user = User.query.filter_by(phone_number=new_phone_number).first()
            if existing_user:
                flash('This phone number is already in use. Please choose a different number.', 'danger')
                return redirect(url_for('edit_profile'))

        # Update phone number if unique
        user.phone_number = new_phone_number

        # Update password if provided
        if request.form['password']:
            user.password = request.form['password']

        # Update addresses
        for i in range(5):
            address_id = request.form.get(f'address_id_{i}')
            address_text = request.form.get(f'address_{i}')
            address_type = request.form.get(f'address_type_{i}')
            pincode = request.form.get(f'pincode_{i}')
            is_default = request.form.get(f'is_default_{i}') == 'on'

            if not pincode or not pincode.isdigit() or len(pincode) != 6:
                flash(f'Invalid pincode for address {i + 1}. Please enter a valid 6-digit number.', 'danger')
                return redirect(url_for('edit_profile'))

            if address_id:
                # Update existing address
                address = Address.query.get(address_id)
                if address and address.user_id == user.id:  # Ensure address belongs to the user
                    address.address = address_text
                    address.address_type = address_type
                    address.pincode = pincode
                    address.is_default = is_default
            elif address_text:
                # Create new address if the text is provided and no existing address
                new_address = Address(
                    user_id=user.id,
                    address=address_text,
                    address_type=address_type,
                    pincode=pincode,
                    is_default=is_default
                )
                db.session.add(new_address)

        # Ensure only one default address
        default_addresses = [a for a in user.addresses if a.is_default]
        if len(default_addresses) > 1:
            for address in default_addresses[1:]:
                address.is_default = False

        db.session.commit()
        flash('Profile updated successfully!', 'success')
        return redirect(url_for('profile'))

    # Pass 'enumerate' explicitly to the template context
    return render_template('edit_profile.html', user=user, enumerate=enumerate)


Now i want to remove edit phone number feature from the code. what are the changes required



Below is the existing script can you make changes.

<script>
    const toast = document.getElementById('toast');
    const showToast = (message) => {
        toast.textContent = message;
        toast.classList.add('active');
        setTimeout(() => toast.classList.remove('active'), 3000);
    };
    const addAddressButton = document.getElementById('add-new-address-button');
    const addAddressFormContainer = document.getElementById('add-address-form-container');
    const cancelAddAddressButton = document.getElementById('cancel-add-address');

    addAddressButton.addEventListener('click', () => {
        addAddressButton.classList.add('hidden');
        addAddressFormContainer.classList.remove('hidden');
    });

    cancelAddAddressButton.addEventListener('click', () => {
        addAddressFormContainer.classList.add('hidden');
        addAddressButton.classList.remove('hidden');
        document.getElementById('add-address-form').reset();
    });
    const editPhoneButton = document.getElementById('edit-phone');
    const updatePhoneButton = document.getElementById('update-phone');
    const cancelPhoneButton = document.getElementById('cancel-edit');
    const phoneDisplay = document.getElementById('phone-display');
    const phoneEdit = document.getElementById('phone-edit');
    const phoneNumber = document.getElementById('phone-number');
    const phoneInput = document.getElementById('phone-input');

    editPhoneButton.addEventListener('click', () => {
        phoneDisplay.classList.add('hidden');
        phoneEdit.classList.remove('hidden');
    });

    cancelPhoneButton.addEventListener('click', () => {
        phoneEdit.classList.add('hidden');
        phoneDisplay.classList.remove('hidden');
        phoneInput.value = phoneNumber.textContent.trim();
    });
    phoneInput.addEventListener('input', () => {
    const currentValue = phoneInput.value.trim();
    if (currentValue.length > 10) {
        phoneInput.value = currentValue.slice(0, 10); // Limit the input to 10 digits
    }
    });

    updatePhoneButton.addEventListener('click', () => {
    const newPhoneNumber = phoneInput.value.trim();
    if (!/^[0-9]{10}$/.test(newPhoneNumber)) {
        showToast('Please enter a valid 10-digit phone number.');
        return;
    }
    fetch('{{ url_for("profile") }}', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json' },
        body: new URLSearchParams({ action: 'update_phone_number', phone_number: newPhoneNumber }),
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                phoneNumber.textContent = newPhoneNumber;
                showToast('Phone number updated successfully!');
                phoneEdit.classList.add('hidden');
                phoneDisplay.classList.remove('hidden');
            } else {
                showToast(data.message || 'Failed to update the phone number.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred. Please try again.');
        });
      });
    // Address Editing
    document.querySelectorAll('.edit-address').forEach(button => {
        button.addEventListener('click', () => {
            const id = button.dataset.id;
            document.getElementById(`address-display-${id}`).classList.add('hidden');
            document.getElementById(`address-edit-${id}`).classList.remove('hidden');
        });
    });

    document.querySelectorAll('.cancel-edit-address').forEach(button => {
        button.addEventListener('click', () => {
            const id = button.dataset.id;
            document.getElementById(`address-edit-${id}`).classList.add('hidden');
            document.getElementById(`address-display-${id}`).classList.remove('hidden');
        });
    });

    document.querySelectorAll('.update-address').forEach(button => {
        button.addEventListener('click', () => {
            const id = button.dataset.id;
            const addressType = document.getElementById(`address-type-${id}`).value.trim();
            const addressInput = document.getElementById(`address-input-${id}`).value.trim();
            const pincode = document.getElementById(`pincode-${id}`).value.trim();

            if (!addressType || !addressInput || !pincode) {
                alert('Please fill in all fields.');
                return;
            }

            fetch('{{ url_for("profile") }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json' },
                body: new URLSearchParams({
                    action: 'update_address',
                    address_id: id,
                    address_type: addressType,
                    address: addressInput,
                    pincode: pincode
                }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Reload to reflect changes
                    } else {
                        alert(data.message || 'Failed to update the address.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again.');
                });
        });
    });

    document.getElementById('add-address-form').addEventListener('submit', (event) => {
    event.preventDefault();

    const formData = new FormData(event.target);

    fetch('{{ url_for("profile") }}', {
        method: 'POST',
        body: new URLSearchParams(formData),
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload(); // Reload the page to reflect the new address
            } else {
                alert(data.message || 'Failed to add the address.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred. Please try again.');
        });
});

// Address Deletion
document.querySelectorAll('.delete-address').forEach(button => {
    button.addEventListener('click', () => {
        const id = button.dataset.id;

        if (!confirm('Are you sure you want to delete this address?')) {
            return;
        }

        fetch('{{ url_for("profile") }}', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json' },
            body: new URLSearchParams({
                action: 'delete_address',
                address_id: id,
            }),
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the address section from the UI
                    document.querySelector(`#address-display-${id}`).parentElement.remove();
                } else {
                    alert(data.message || 'Failed to delete the address.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            });
    });
});
const updatePasswordButton = document.getElementById('update-password-button');
const passwordEdit = document.getElementById('password-edit');
const passwordDisplay = document.getElementById('password-display');
const submitPasswordButton = document.getElementById('submit-password');
const cancelPasswordButton = document.getElementById('cancel-password');
const passwordInput = document.getElementById('password-input');

updatePasswordButton.addEventListener('click', () => {
    passwordDisplay.classList.add('hidden');
    passwordEdit.classList.remove('hidden');
});

cancelPasswordButton.addEventListener('click', () => {
    passwordEdit.classList.add('hidden');
    passwordDisplay.classList.remove('hidden');
    passwordInput.value = '';
});

submitPasswordButton.addEventListener('click', () => {
    const newPassword = passwordInput.value.trim();

    if (!newPassword || newPassword.length < 4) {
        alert('Password must be at least 4 characters long.');
        return;
    }

    if (confirm('Are you sure you want to update your password?')) {
        fetch('{{ url_for("profile") }}', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json' },
            body: new URLSearchParams({
                action: 'update_password',
                password: newPassword
            }),
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Password updated successfully!');
                    passwordEdit.classList.add('hidden');
                    passwordDisplay.classList.remove('hidden');
                    passwordInput.value = '';
                } else {
                    alert(data.message || 'Failed to update the password.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            });
    }
});

</script>
